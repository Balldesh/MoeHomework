public class Pawn {
  public enum Color {
    WHITE, BLACK,
  }

  private Color color;
  private int row;
  private int column;

  public Pawn(Color color, int row, int column) {
    this.color = color;

    checkCoordinates(row, column);
    this.row = row;
    this.column = column;
  }

  public int getRow() {
    return row;
  }

  public int getColumn() {
    return column;
  }

  public void setCoordinates(int row, int column) {
    checkCoordinates(row, column);
    if (color == Color.WHITE) {
      if (row == this.row + 1 || (row == this.row + 2 && this.row == 2)) {
        // ход корректен, обновляем позицию пешки
        this.row = row;
        this.column = column;
      } else {
        // ход некорректен, генерируем исключение
        throw new IllegalArgumentException("Некорректный ход для белой пешки");
      }
    } else if (color == Color.BLACK) {
      if (row == this.row - 1 || (row == this.row - 2 && this.row == 7)) {
        // ход корректен, обновляем позицию пешки
        this.row = row;
        this.column = column;
      } else {
        // ход некорректен, генерируем исключение
        throw new IllegalArgumentException("Некорректный ход для черной пешки");
      }
    }
  }

  private static void checkCoordinates(int row, int column) {
    if (row < 1 || row > 8) {
      throw new IllegalArgumentException("Некорректный номер строки: " + row);
    }

    if (column < 1 || column > 8) {
      System.out.println("Некорректный номер столбца: " + column);
      throw new IllegalArgumentException();
    }
  }
}
